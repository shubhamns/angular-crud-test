import { TestBed } from '@angular/core/testing';
import {
  HttpClientTestingModule,
  HttpTestingController,
} from '@angular/common/http/testing';
import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [UserService],
    });
    service = TestBed.inject(UserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should have createUser function', () => {
    expect(service.createUser).toBeTruthy();
  });

  it('should have getUsers function', () => {
    expect(service.getUsers).toBeTruthy();
  });

  it('should have getUserById function', () => {
    expect(service.getUserById).toBeTruthy();
  });

  it('should have updateUser function', () => {
    expect(service.updateUser).toBeTruthy();
  });

  it('should have deleteUser function', () => {
    expect(service.deleteUser).toBeTruthy();
  });

  xit('#getUserById should return expected data', (done: DoneFn) => {
    const payload: any = {};
    service.createUser(payload).subscribe((data) => {
      expect(data.results).toEqual(data);
      done();
    });
  });

  it('#getUsers should return expected data', (done: DoneFn) => {
    const expectedData: any[] = [];
    // service.getUsers().subscribe((data) => {
    //   expect(data.length).toBe(0);
    //   expect(data.results).toEqual(expectedData);
    //   done();
    // });
    const req = httpMock.expectOne((request) => {
      console.log('url: ', request.url);
      return true;
    });
    req.flush(expectedData);
    httpMock.verify();
  });

  xit('#getUserById should return expected data', (done: DoneFn) => {
    const expectedData: any = {};
    service.getUserById('123').subscribe((data) => {
      expect(data.results).toEqual(expectedData);
      done();
    });
  });

  xit('#updateUserById should return expected data', (done: DoneFn) => {
    const payload: any = {};
    service.updateUser('123', payload).subscribe((data) => {
      expect(data).toEqual(data);
      done();
    });
  });

  xit('#deleteUserById should return expected data', (done: DoneFn) => {
    service.deleteUser('123').subscribe((data) => {
      expect(data).toEqual(data);
      done();
    });
  });
});
